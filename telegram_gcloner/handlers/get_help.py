#!/usr/bin/python3
# -*- coding: utf-8 -*-
import logging

from telegram.ext import Dispatcher, CommandHandler

from utils.config_loader import config
from utils.callback import callback_delete_message
from utils.restricted import restricted

logger = logging.getLogger(__name__)


def init(dispatcher: Dispatcher):
    """Provide handlers initialization."""
    dispatcher.add_handler(CommandHandler('help', get_help))


@restricted
def get_help(update, context):
    message = 'Gá»­i liÃªn káº¿t Google Drive hoáº·c chuyá»ƒn tiáº¿p tin nháº¯n cÃ³ liÃªn káº¿t Google Drive Ä‘á»ƒ Clone file.\n' \
              'Sau Ä‘Ã³ táº£i lÃªn /sa vÃ  cáº¥u hÃ¬nh /folders cáº§n sá»­ dá»¥ng.\n\n' \
              'ğŸ“š Lá»‡nh Commands:\n' \
              ' â”‚ /folders - Set favorite folders\n' \
              ' â”‚ /sa - Chá»‰ há»£p lá»‡ khi Private, táº£i lÃªn tá»‡p ZIP chá»©a cÃ¡c tÃ i khoáº£n SA vá»›i lá»‡nh nÃ y.\n' \
              ' â”‚ /help - Hiá»ƒn thá»‹ ra thÃ´ng bÃ¡o nÃ y\n'
    rsp = update.message.reply_text(message)
    rsp.done.wait(timeout=60)
    message_id = rsp.result().message_id
    if update.message.chat_id < 0:
        context.job_queue.run_once(callback_delete_message, config.TIMER_TO_DELETE_MESSAGE,
                                   context=(update.message.chat_id, message_id))
        context.job_queue.run_once(callback_delete_message, config.TIMER_TO_DELETE_MESSAGE,
                                   context=(update.message.chat_id, update.message.message_id))
